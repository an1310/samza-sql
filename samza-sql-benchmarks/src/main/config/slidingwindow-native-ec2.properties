
# Job
job.factory.class=org.apache.samza.job.yarn.YarnJobFactory
job.name=sliding-window-native-ec22-1

# YARN
yarn.package.path=http://mugo.cs.indiana.edu/${project.artifactId}-${pom.version}-dist.tar.gz
yarn.container.memory.mb=2048
yarn.container.count=2

# Task
task.class=org.apache.samza.sql.bench.SlidingWindowNativeStreamTask
task.inputs=kafka.orders

task.checkpoint.factory=org.apache.samza.checkpoint.kafka.KafkaCheckpointManagerFactory
task.checkpoint.system=kafka
task.checkpoint.replication.factor=1

# Serializers
serializers.registry.orders.class=org.apache.samza.sql.bench.serde.ConfigurableAvroSerdeFactory
serializers.orders.schema=ORDERS
serializers.registry.slidingout.class=org.apache.samza.sql.bench.serde.ConfigurableAvroSerdeFactory
serializers.slidingout.schema=SLIDINGWINDOW
serializers.registry.int.class=org.apache.samza.serializers.IntegerSerdeFactory
serializers.registry.long.class=org.apache.samza.serializers.LongSerdeFactory
serializers.registry.str.class=org.apache.samza.sql.bench.utils.StringSerdeFactory
serializers.registry.intmsgtuple.class=org.apache.samza.sql.bench.slidingwindow.IntermediateMessageTupleSerdeFactory
serializers.registry.tokey.class=org.apache.samza.sql.bench.slidingwindow.TimeAndOffsetKeySerdeFactory
serializers.registry.timekey.class=org.apache.samza.sql.bench.slidingwindow.TimeKeySerdeFactory
serializers.registry.timebasedaggstate.class=org.apache.samza.sql.bench.slidingwindow.TimeBasedSlidingWindowAggregatorStateSerdeFactory


# Stores
stores.windowstate.factory=org.apache.samza.storage.kv.RocksDbKeyValueStorageEngineFactory
stores.windowstate.key.serde=timekey
stores.windowstate.msg.serde=timebasedaggstate
stores.windowstate.changelog=kafka.windowstorelog
stores.windowstate.changelog.replication.factor=1

stores.messagestore.factory=org.apache.samza.storage.kv.RocksDbKeyValueStorageEngineFactory
stores.messagestore.key.serde=tokey
stores.messagestore.msg.serde=orders
stores.messagestore.changelog=kafka.msgstorelog
stores.messagestore.changelog.replication.factor=1

stores.aggstate.factory=org.apache.samza.storage.kv.RocksDbKeyValueStorageEngineFactory
stores.aggstate.key.serde=int
stores.aggstate.msg.serde=int
stores.aggstate.changelog=kafka.aggstatestorelog
stores.aggstate.changelog.replication.factor=1

stores.windowbounds.factory=org.apache.samza.storage.kv.RocksDbKeyValueStorageEngineFactory
stores.windowbounds.key.serde=str
stores.windowbounds.msg.serde=long
stores.windowbounds.changelog=kafka.windowboundslog
stores.windowbounds.changelog.replication.factor=1


# Kafka System
systems.kafka.samza.offset.default=oldest
systems.kafka.samza.factory=org.apache.samza.system.kafka.KafkaSystemFactory
systems.kafka.streams.orders.samza.msg.serde=orders
systems.kafka.streams.orders.samza.key.serde=int
systems.kafka.streams.slidingnativeoutput.samza.msg.serde=slidingout
systems.kafka.streams.slidingnativeoutput.samza.key.serde=int
systems.kafka.consumer.zookeeper.connect=ec2-52-26-1-191.us-west-2.compute.amazonaws.com:2181,ec2-52-27-69-253.us-west-2.compute.amazonaws.com:2181,ec2-52-33-19-22.us-west-2.compute.amazonaws.com:2181
systems.kafka.producer.bootstrap.servers=ec2-52-11-7-23.us-west-2.compute.amazonaws.com:9092,ec2-52-34-245-37.us-west-2.compute.amazonaws.com:9092,ec2-52-34-172-187.us-west-2.compute.amazonaws.com:9092


# Define a metrics reporter called "snapshot", which publishes metrics
# every 60 seconds.
metrics.reporters=snapshot
metrics.reporter.snapshot.class=org.apache.samza.metrics.reporter.MetricsSnapshotReporterFactory

# Tell the snapshot reporter to publish to a topic called "metrics"
# in the "kafka" system.
metrics.reporter.snapshot.stream=kafka.slidingwindowmetrics3

# Encode metrics data as JSON.
serializers.registry.metrics.class=org.apache.samza.serializers.MetricsSnapshotSerdeFactory
systems.kafka.streams.slidingwindowmetrics3.samza.msg.serde=metrics
