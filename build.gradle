buildscript {
  repositories {
    mavenCentral()
  }

  apply from: file("gradle/buildscript.gradle"), to: buildscript
}

allprojects {
  repositories {
    mavenCentral()
    mavenLocal()
    maven {
      url "https://repository.apache.org/content/repositories/snapshots/"
    }
    maven {
      url "http://conjars.org/repo"
    }
  }
}

apply from: file("gradle/dependency-versions.gradle")
apply from: file("gradle/dependency-versions-scala-" + scalaVersion + ".gradle")

allprojects {
  apply plugin: "idea"
}

project(":samza-sql-core_$scalaVersion") {
  apply plugin: "java"

  dependencies {
    compile "org.apache.samza:samza-api:$samzaVersion"
    compile "org.apache.samza:samza-core_$scalaVersion:$samzaVersion"
    compile "org.apache.samza:samza-kv_$scalaVersion:$samzaVersion"
    compile "commons-collections:commons-collections:$commonsCollectionVersion"
    compile("io.confluent:kafka-schema-registry:$schemaRegistryVersion") {
      exclude group: "com.fasterxml.jackson.core"
    }
    compile "org.apache.avro:avro:$avroVersion"
    compile "org.apache.curator:curator-framework:$curatorVersion"
    testCompile "junit:junit:$junitVersion"
    testCompile "org.mockito:mockito-all:$mockitoVersion"
  }
}

project(":samza-sql-planner_$scalaVersion") {
  apply plugin: "java"
  apply plugin: "scala"

  sourceSets.main.scala.srcDir "src/main/java"
  sourceSets.main.java.srcDirs = []

  dependencies {
    compile project(":samza-sql-core_$scalaVersion")
    compile "org.apache.samza:samza-kafka_$scalaVersion:$samzaVersion"
    compile("org.apache.calcite:calcite-core:$calciteVersion") {
      exclude group: 'com.fasterxml.jackson.core'
    }
    compile "com.101tec:zkclient:$zkClientVersion"
    compile "org.apache.zookeeper:zookeeper:$zookeeperVersion"
    compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"
    compile "org.apache.kafka:kafka_$scalaVersion:$kafkaVersion"
    compile "org.apache.kafka:kafka-clients:$kafkaVersion"
    compile "com.google.code.gson:gson:$gsonVersion"
    compile "org.apache.curator:curator-framework:$curatorVersion"
    testCompile "org.apache.curator:curator-test:$curatorVersion"
    testCompile "io.confluent:kafka-schema-registry:$schemaRegistryVersion"
    testCompile "org.apache.kafka:kafka_$scalaVersion:$kafkaVersion:test"
    testCompile "junit:junit:$junitVersion"
    testCompile "org.mockito:mockito-all:$mockitoVersion"
  }
}

project(":samza-sql-jdbc") {
  apply plugin: "java"
  dependencies {
    compile project(":samza-sql-core_$scalaVersion")
    compile project(":samza-sql-planner_$scalaVersion")
    testCompile "junit:junit:$junitVersion"
  }
}

project(":samza-sql-shell") {
  apply plugin: "java"

  defaultTasks 'distTar'

  // a configuration for dependencies that need exploding into package
  configurations {
    explode
  }

  dependencies {
    compile project(":samza-sql-jdbc")
    compile "sqlline:sqlline:$sqllineVersion"
    compile "org.slf4j:slf4j-api:$slf4jVersion"
    compile "org.slf4j:slf4j-log4j12:$slf4jVersion"
    explode(group: 'org.apache.samza', name: 'samza-shell', ext: 'tgz', classifier: 'dist', version: "$samzaVersion")
    testCompile "junit:junit:$junitVersion"
    runtime(group: 'org.apache.samza', name: 'samza-log4j', version: "$samzaVersion")
    runtime(group: 'org.apache.samza', name: 'samza-shell', version: "$samzaVersion")
    runtime(group: 'org.apache.samza', name: 'samza-yarn_2.10', version: "$samzaVersion")
    runtime(group: 'org.apache.samza', name: 'samza-kv-rocksdb_2.10', version: "$samzaVersion")
    runtime(group: 'org.apache.samza', name: 'samza-kafka_2.10', version: "$samzaVersion")
    runtime(group: 'org.apache.kafka', name: 'kafka_2.10', version: "$kafkaVersion")
    runtime(group: 'org.apache.hadoop', name: 'hadoop-hdfs', version: "$hadoopVersion")
  }

  // make the samza distribution .tgz file
  task distTar(dependsOn: build, type: Tar) {
    destinationDir(new File(project.buildDir, "/distributions"))
    compression(Compression.GZIP)
    classifier('dist')
    extension('tar.gz')

    into("config") {
      from("src/main/config") {
        include "orders-feed.properties"

        // expand the Maven tokens with Gradle equivalents.  Also change 'target' (Maven) to 'build/distributions' (Gradle)
        filter { String line ->
          line.replaceAll('[\$][{]basedir[}]', project.projectDir.toString()).replaceAll('[\$][{]project.artifactId[}]', project.name.toString()).replaceAll('/target/', '/build/distributions/').replaceAll('[\$][{]pom.version[}]', version)
        }
      }
    }


    into("bin") {
      from {
        configurations.explode.collect { tarTree(it) }
      }
    }

    into("bin") {
      from("src/main/bash") {
        include "samzasql"
      }
    }

    into("lib") {
      from configurations.runtime
      from configurations.runtime.artifacts.files
      from("src/main/resources/") {
        include "log4j.properties"
      }
    }
  }

  task installGrid(type: Exec) {
    workingDir(project.projectDir)
    commandLine("bin/grid", "install", "all")
    outputs.upToDateWhen {
      ["kafka", "zookeeper", "yarn"].every {
        (new File(project.projectDir, "deploy/" + it)).exists()
      }
    }
  }

  task deploySamzaSQL(dependsOn: [distTar, installGrid], type: Sync) {
    into(new File(project.projectDir, "/deploy/samzasql"))
    from(tarTree(distTar.archivePath))
  }

  task startGrid(dependsOn: [installGrid], type: Exec) {
    workingDir(project.projectDir)
    commandLine("bin/grid", "start", "all")
    outputs.upToDateWhen {
      // use running zookeeper as proxy
      File zookeeperPidFile = new File("/tmp/zookeeper/zookeeper_server.pid")
      zookeeperPidFile.exists() &&
        "kill -0 ${zookeeperPidFile.text}".execute().waitFor() == 0
    }
  }

  task stopGrid(type: Exec) {
    workingDir(project.projectDir)
    commandLine("bin/grid", "stop", "all")
  }

  task sqlShell(dependsOn: [deploySamzaSQL], type: Exec) {
    workingDir(project.projectDir)
    commandLine("deploy/samzasql/bin/samzasql")
  }
}