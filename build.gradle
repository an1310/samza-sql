buildscript {
  repositories {
    mavenCentral()
  }

  apply from: file("gradle/buildscript.gradle"), to: buildscript
}

allprojects {
  repositories {
    mavenCentral()
    mavenLocal()
    maven {
      url "https://repository.apache.org/content/repositories/snapshots/"
    }
    maven {
      url "http://conjars.org/repo"
    }
  }
}

apply from: file("gradle/dependency-versions.gradle")
apply from: file("gradle/dependency-versions-scala-" + scalaVersion + ".gradle")

allprojects {
  apply plugin: "idea"
}

project(":samza-sql-master") {
  apply plugin: "java"
  apply plugin: 'application'

  dependencies {
    compile project(":samza-sql-core_$scalaVersion")
    compile project(":samza-sql-planner_$scalaVersion")
    compile "org.eclipse.jetty.aggregate:jetty-all:$jettyVersion"
    compile "org.glassfish.jersey.containers:jersey-container-servlet-core:$jerseyVersion"
    compile "org.glassfish.jersey.containers:jersey-container-jetty-http:$jerseyVersion"
    compile "org.glassfish.jersey.ext:jersey-bean-validation:$jerseyVersion"
    compile "org.glassfish.jersey.core:jersey-server:$jerseyVersion"
    compile "org.glassfish.jersey.media:jersey-media-json-jackson:$jerseyVersion"
    compile "com.fasterxml.jackson.core:jackson-databind:$fasterxmlJacksonVersion"
    compile "org.avaje:avaje-agentloader:$ebeanAgentLoaderVersion"
    compile "org.avaje.ebeanorm:avaje-ebeanorm-agent:$ebeanOrmAgentVersion"
    compile "org.avaje.ebeanorm:avaje-ebeanorm:$ebeanOrmVersion"
    compile "com.h2database:h2:$h2Version"
    testCompile "junit:junit:$junitVersion"
    testCompile "org.mockito:mockito-all:$mockitoVersion"
  }

  mainClassName = "org.apache.samza.sql.master.SamzaSQLMaster"

  task execute(type: JavaExec) {
    main = "org.apache.samza.sql.master.SamzaSQLMaster"
    classpath = sourceSets.main.runtimeClasspath
    systemProperties = [
      'samza.sql.master.webapp.home': 'src/main/webapp',
      'samza.sql.mode'              : 'dev'
    ]
  }
}

project(":samza-sql-core_$scalaVersion") {
  apply plugin: "java"

  dependencies {
    compile "org.apache.samza:samza-api:$samzaVersion"
    compile "org.apache.samza:samza-core_$scalaVersion:$samzaVersion"
    compile "org.apache.samza:samza-kv_$scalaVersion:$samzaVersion"
    compile "commons-collections:commons-collections:$commonsCollectionVersion"
    compile("io.confluent:kafka-schema-registry:$schemaRegistryVersion") {
      exclude group: "com.fasterxml.jackson.core"
    }
    compile "org.apache.avro:avro:$avroVersion"
    testCompile "junit:junit:$junitVersion"
    testCompile "org.mockito:mockito-all:$mockitoVersion"
  }
}

project(":samza-sql-planner_$scalaVersion") {
  apply plugin: "java"
  apply plugin: "scala"

  dependencies {
    compile project(":samza-sql-core_$scalaVersion")
    compile "org.apache.samza:samza-kafka_$scalaVersion:$samzaVersion"
    compile("org.apache.calcite:calcite-core:$calciteVersion") {
      exclude group: 'com.fasterxml.jackson.core'
    }
    compile "com.101tec:zkclient:$zkClientVersion"
    compile "org.apache.zookeeper:zookeeper:$zookeeperVersion"
    compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonVersion"
    compile "org.apache.kafka:kafka_$scalaVersion:$kafkaVersion"
    compile "org.apache.kafka:kafka-clients:$kafkaVersion"
    compile "com.google.code.gson:gson:$gsonVersion"
    compile "org.apache.curator:curator-framework:$curatorVersion"
    testCompile "org.apache.curator:curator-test:$curatorVersion"
    testCompile "io.confluent:kafka-schema-registry:$schemaRegistryVersion"
    testCompile "org.apache.kafka:kafka_$scalaVersion:$kafkaVersion:test"
    testCompile "junit:junit:$junitVersion"
    testCompile "org.mockito:mockito-all:$mockitoVersion"
  }
}

project(":samza-sql-jdbc") {
  apply plugin: "java"
  dependencies {
    compile project(":samza-sql-core_$scalaVersion")
    compile project(":samza-sql-planner_$scalaVersion")
    testCompile "junit:junit:$junitVersion"
  }
}

project(":samza-sql-shell") {
  apply plugin: "java"

  defaultTasks 'distTar'

  // a configuration for dependencies that need exploding into package
  configurations {
    explode
  }

  dependencies {
    compile project(":samza-sql-jdbc")
    compile "sqlline:sqlline:$sqllineVersion"
    compile "org.slf4j:slf4j-api:$slf4jVersion"
    compile "org.slf4j:slf4j-log4j12:$slf4jVersion"
    explode(group: 'org.apache.samza', name: 'samza-shell', ext: 'tgz', classifier: 'dist', version: "$samzaVersion")
    testCompile "junit:junit:$junitVersion"
  }

  // make the samza distribution .tgz file
  task distTar(dependsOn: build, type: Tar) {
    destinationDir(new File(project.buildDir, "/distributions"))
    compression(Compression.GZIP)
    classifier('dist')
    extension('tar.gz')


    into("bin") {
      from {
        configurations.explode.collect { tarTree(it) }
      }
    }

    into("bin") {
      from("src/main/bash") {
        include "samzasql"
      }
    }

    into("lib") {
      from configurations.runtime
      from configurations.runtime.artifacts.files
      from("src/main/resources/") {
        include "log4j.properties"
      }
    }
  }

  task installGrid(type: Exec) {
    workingDir(project.projectDir)
    commandLine("bin/grid", "install", "all")
    outputs.upToDateWhen {
      ["kafka", "zookeeper", "yarn"].every {
        (new File(project.projectDir, "deploy/" + it)).exists()
      }
    }
  }

  task deploySamzaSQL(dependsOn: [distTar, installGrid], type: Sync) {
    into(new File(project.projectDir, "/deploy/samzasql"))
    from(tarTree(distTar.archivePath))
  }

  task startGrid(dependsOn: [installGrid], type: Exec) {
    workingDir(project.projectDir)
    commandLine("bin/grid", "start", "all")
    outputs.upToDateWhen {
      // use running zookeeper as proxy
      File zookeeperPidFile = new File("/tmp/zookeeper/zookeeper_server.pid")
      zookeeperPidFile.exists() &&
        "kill -0 ${zookeeperPidFile.text}".execute().waitFor() == 0
    }
  }

  task stopGrid(type: Exec) {
    workingDir(project.projectDir)
    commandLine("bin/grid", "stop", "all")
  }

  task sqlShell(dependsOn: [deploySamzaSQL], type: Exec) {
    workingDir(project.projectDir)
    commandLine("deploy/samzasql/bin/samzasql")
  }

}
